// Clases para coordenadas
class Cartesiana {
    constructor(x, y) {
        this._x = x;
        this._y = y;
    }

    get x() {
        return this._x;
    }

    get y() {
        return this._y;
    }

    set x(value) {
        this._x = value;
    }

    set y(value) {
        this._y = value;
    }

    // Método para convertir a coordenadas polares
    toPolar() {
        const r = Math.sqrt(this._x ** 2 + this._y ** 2);
        const theta = Math.atan2(this._y, this._x);
        return new Polar(r, theta);
    }
}

class Polar {
    constructor(r, theta) {
        this._r = r;
        this._theta = theta;
    }

    get r() {
        return this._r;
    }

    get theta() {
        return this._theta;
    }

    set r(value) {
        this._r = value;
    }

    set theta(value) {
        this._theta = value;
    }

    // Método para convertir a coordenadas cartesianas
    toCartesiana() {
        const x = this._r * Math.cos(this._theta);
        const y = this._r * Math.sin(this._theta);
        return new Cartesiana(x, y);
    }
}

// Función para calcular la longitud del lado a partir del apotema
function calcularLadoDesdeApotema(lados, apotema) {
    return 2 * apotema * Math.tan(Math.PI / lados);
}

// Función para calcular el apotema a partir de la longitud del lado
function calcularApotemaDesdeLado(lados, lado) {
    return lado / (2 * Math.tan(Math.PI / lados));
}

// Función para calcular los vértices del polígono
function calcularVertices(lados, valor, centroX, centroY, usarApotema) {
    let apotema, lado;
    if (usarApotema) {
        apotema = valor;
        lado = calcularLadoDesdeApotema(lados, apotema);
    } else {
        lado = valor;
        apotema = calcularApotemaDesdeLado(lados, lado);
    }

    const vertices = [];
    const angulo = (2 * Math.PI) / lados;

    for (let i = 0; i < lados; i++) {
        const theta = i * angulo;
        const x = centroX + apotema * Math.cos(theta);
        const y = centroY + apotema * Math.sin(theta);
        vertices.push(new Cartesiana(x, y));
    }

    return vertices;
}

// Función para generar el polígono
function poligono(lados, valor, centroX, centroY, usarApotema) {
    const vertices = calcularVertices(lados, valor, centroX, centroY, usarApotema);
    return rotarPoligono(vertices);
}

// Función para rotar el polígono y asegurar que tenga una base recta
function rotarPoligono(vertices) {
    const ladoBase = Math.atan2(vertices[1].y - vertices[0].y, vertices[1].x - vertices[0].x);
    const anguloRotacion = -ladoBase;
    const centro = vertices.reduce((acc, vertice) => {
        acc.x += vertice.x / vertices.length;
        acc.y += vertice.y / vertices.length;
        return acc;
    }, new Cartesiana(0, 0));

    return vertices.map(vertice => {
        const xCentrado = vertice.x - centro.x;
        const yCentrado = vertice.y - centro.y;
        const polar = new Cartesiana(xCentrado, yCentrado).toPolar();
        polar.theta += anguloRotacion;
        const rotado = polar.toCartesiana();
        return new Cartesiana(rotado.x + centro.x, rotado.y + centro.y);
    });
}

// Función para dibujar el polígono
function dibujarPoligono(lados, valor, centroX, centroY, usarApotema) {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const anchoCanvas = canvas.width;
    const altoCanvas = canvas.height;

    // Borrar el canvas
    ctx.clearRect(0, 0, anchoCanvas, altoCanvas);

    // Generar y rotar polígono
    const vertices = poligono(lados, valor, centroX, centroY, usarApotema);

    // Mostrar coordenadas en el HTML
    const coordenadasDiv = document.getElementById('coordenadas');
    coordenadasDiv.innerHTML = '<h2>Coordenadas de los Vértices:</h2><ul>';
    vertices.forEach((vertice, index) => {
        coordenadasDiv.innerHTML += `<li>Vértice ${index + 1}: (${vertice.x.toFixed(2)}, ${vertice.y.toFixed(2)})</li>`;
    });
    coordenadasDiv.innerHTML += '</ul>';

    // Dibujar el polígono
    ctx.beginPath();
    ctx.moveTo(vertices[0].x, vertices[0].y);
    for (let i = 1; i < vertices.length; i++) {
        ctx.lineTo(vertices[i].x, vertices[i].y);
    }
    ctx.closePath();
    ctx.stroke();
}

// Función para actualizar el polígono basado en los datos del formulario
function actualizarPoligono() {
    const lados = parseInt(document.getElementById('lados').value);
    const valor = parseFloat(document.getElementById('valor').value);
    const opcion = document.getElementById('opcion').value;
    const centroX = parseFloat(document.getElementById('centroX').value);
    const centroY = parseFloat(document.getElementById('centroY').value);

    if (isNaN(lados) || isNaN(valor) || isNaN(centroX) || isNaN(centroY)) {
        alert("Por favor, ingrese todos los valores correctamente.");
        return;
    }

    const usarApotema = (opcion === 'apotema');
    dibujarPoligono(lados, valor, centroX, centroY, usarApotema);
}
