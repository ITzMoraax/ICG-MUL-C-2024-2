// Clases para coordenadas
class Cartesiana {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}

class Polar {
    constructor(r, theta) {
        this.r = r; // Radio o apotema
        this.theta = theta; // Ángulo en radianes
    }
}

// Función para convertir coordenadas cartesianas a polares
function Cart2Pol(cartesiana) {
    const r = Math.sqrt(cartesiana.x ** 2 + cartesiana.y ** 2);
    const theta = Math.atan2(cartesiana.y, cartesiana.x);
    return new Polar(r, theta);
}

// Función para convertir coordenadas polares a cartesianas
function Pol2Cart(polar) {
    const x = polar.r * Math.cos(polar.theta);
    const y = polar.r * Math.sin(polar.theta);
    return new Cartesiana(x, y);
}

// Función para calcular los vértices del polígono
function calcularVertices(lados, apotema, centroX, centroY) {
    const vertices = [];
    const angulo = (2 * Math.PI) / lados;

    for (let i = 0; i < lados; i++) {
        const theta = i * angulo;
        const x = centroX + apotema * Math.cos(theta);
        const y = centroY + apotema * Math.sin(theta);
        vertices.push(new Cartesiana(x, y));
    }

    return vertices;
}

// Función para dibujar el polígono
function dibujarPoligono(lados, apotema, centroX, centroY) {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const anchoCanvas = canvas.width;
    const altoCanvas = canvas.height;

    // Borrar el canvas
    ctx.clearRect(0, 0, anchoCanvas, altoCanvas);

    // Calcular vértices
    const vertices = calcularVertices(lados, apotema, centroX, centroY);

    // Mostrar coordenadas en el HTML
    const coordenadasDiv = document.getElementById('coordenadas');
    coordenadasDiv.innerHTML = '<h2>Coordenadas de los Vértices:</h2><ul>';
    vertices.forEach((vertice, index) => {
        coordenadasDiv.innerHTML += `<li>Vértice ${index + 1}: (${vertice.x.toFixed(2)}, ${vertice.y.toFixed(2)})</li>`;
    });
    coordenadasDiv.innerHTML += '</ul>';

    // Dibujar el polígono
    ctx.beginPath();
    ctx.moveTo(vertices[0].x, vertices[0].y);
    for (let i = 1; i < vertices.length; i++) {
        ctx.lineTo(vertices[i].x, vertices[i].y);
    }
    ctx.closePath();
    ctx.stroke();
}

// Función para actualizar el polígono basado en los datos del formulario
function actualizarPoligono() {
    const lados = parseInt(document.getElementById('lados').value);
    const apotema = parseFloat(document.getElementById('apotema').value);
    const centroX = parseFloat(document.getElementById('centroX').value);
    const centroY = parseFloat(document.getElementById('centroY').value);

    if (isNaN(lados) || isNaN(apotema) || isNaN(centroX) || isNaN(centroY)) {
        alert("Por favor, ingrese todos los valores correctamente.");
        return;
    }

    dibujarPoligono(lados, apotema, centroX, centroY);
}
